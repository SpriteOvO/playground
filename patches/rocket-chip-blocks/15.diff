diff --git a/src/main/scala/devices/chiplink/CAM.scala b/src/main/scala/devices/chiplink/CAM.scala
index e0dbf5a..4c69159 100644
--- a/src/main/scala/devices/chiplink/CAM.scala
+++ b/src/main/scala/devices/chiplink/CAM.scala
@@ -24,14 +24,14 @@ class CAM(keys: Int, dataBits: Int) extends Module
   io.key := OHToUInt(free_sel, keys)
 
   io.alloc.ready := free.orR
-  when (io.alloc.fire()) { data.write(io.key, io.alloc.bits) }
+  when (io.alloc.fire) { data.write(io.key, io.alloc.bits) }
 
   // Support free in same cycle as alloc
-  val bypass = io.alloc.fire() && io.free.bits === io.key
+  val bypass = io.alloc.fire && io.free.bits === io.key
   io.data := Mux(bypass, io.alloc.bits, data(io.free.bits))
 
   // Update CAM usage
-  val clr = Mux(io.alloc.fire(), free_sel, 0.U)
+  val clr = Mux(io.alloc.fire, free_sel, 0.U)
   val set = Mux(io.free.valid, UIntToOH(io.free.bits), 0.U)
   free := (free & ~clr) | set
 }
diff --git a/src/main/scala/devices/chiplink/Parameters.scala b/src/main/scala/devices/chiplink/Parameters.scala
index 3975212..a8e58d4 100644
--- a/src/main/scala/devices/chiplink/Parameters.scala
+++ b/src/main/scala/devices/chiplink/Parameters.scala
@@ -126,7 +126,7 @@ case class ChipLinkInfo(params: ChipLinkParams, edgeIn: TLEdge, edgeOut: TLEdge,
     val beats = beats1(x.bits, forceFormat)
     val first = count === UInt(0)
     val last  = count === UInt(1) || (first && beats === UInt(0))
-    when (x.fire()) { count := Mux(first, beats, count - UInt(1)) }
+    when (x.fire) { count := Mux(first, beats, count - UInt(1)) }
     (first, last)
   }
 
diff --git a/src/main/scala/devices/chiplink/Partial.scala b/src/main/scala/devices/chiplink/Partial.scala
index c9376bd..549a231 100644
--- a/src/main/scala/devices/chiplink/Partial.scala
+++ b/src/main/scala/devices/chiplink/Partial.scala
@@ -42,7 +42,7 @@ class ParitalExtractor[T <: TLDataChannel](gen: T) extends Module
     }
 
     // Update the FSM
-    when (io.i.fire()) {
+    when (io.i.fire) {
       shift := Mux(empty, i_data, wide >> 36)
       state := state - UInt(1)
       when (empty)   { state := UInt(8) }
@@ -93,7 +93,7 @@ class PartialInjector[T <: TLDataChannel](gen: T) extends Module
     }
 
     // Update the FSM
-    when (io.o.fire()) {
+    when (io.o.fire) {
       shift := wide >> 32
       state := state + UInt(1)
       when (full || last) {
diff --git a/src/main/scala/devices/chiplink/RX.scala b/src/main/scala/devices/chiplink/RX.scala
index a538186..25b1d59 100644
--- a/src/main/scala/devices/chiplink/RX.scala
+++ b/src/main/scala/devices/chiplink/RX.scala
@@ -33,7 +33,7 @@ class RX(info: ChipLinkInfo) extends Module
   // Select the correct HellaQueue for the request
   val (first, _) = info.firstlast(beat)
   val formatBits  = beat.bits(2, 0)
-  val formatValid = beat.fire() && first
+  val formatValid = beat.fire && first
   val format = Mux(formatValid, formatBits, RegEnable(formatBits, formatValid))
   val formatOH = UIntToOH(format)
 
@@ -77,7 +77,7 @@ class RX(info: ChipLinkInfo) extends Module
   // Generate new RX credits as the HellaQueues drain
   val rxInc = Wire(new CreditBump(info.params))
   (hqX zip rxInc.X) foreach { case (hq, inc) =>
-    inc := hq.io.deq.fire().asUInt
+    inc := hq.io.deq.fire.asUInt
   }
 
   // Generate new TX credits as we receive F-format messages
@@ -86,8 +86,8 @@ class RX(info: ChipLinkInfo) extends Module
   // As we hand-over credits, reset the counters
   tx := tx + txInc
   rx := rx + rxInc
-  when (txOut.fire()) { tx := txInc }
-  when (rxOut.fire()) { rx := rxInc }
+  when (txOut.fire) { tx := txInc }
+  when (rxOut.fire) { rx := rxInc }
 }
 
 /*
diff --git a/src/main/scala/devices/chiplink/SinkA.scala b/src/main/scala/devices/chiplink/SinkA.scala
index c1c1c47..416ef59 100644
--- a/src/main/scala/devices/chiplink/SinkA.scala
+++ b/src/main/scala/devices/chiplink/SinkA.scala
@@ -32,7 +32,7 @@ class SinkA(info: ChipLinkInfo) extends Module
   val s_address1 = UInt(2, width = 2)
   val s_data     = UInt(3, width = 2)
 
-  when (io.q.fire()) {
+  when (io.q.fire) {
     switch (state) {
       is (s_header)   { state := s_address0 }
       is (s_address0) { state := s_address1 }
diff --git a/src/main/scala/devices/chiplink/SinkB.scala b/src/main/scala/devices/chiplink/SinkB.scala
index 88f68e7..24b28a1 100644
--- a/src/main/scala/devices/chiplink/SinkB.scala
+++ b/src/main/scala/devices/chiplink/SinkB.scala
@@ -27,7 +27,7 @@ class SinkB(info: ChipLinkInfo) extends Module
   val s_address1 = UInt(2, width = 2)
   val s_data     = UInt(3, width = 2)
 
-  when (io.q.fire()) {
+  when (io.q.fire) {
     switch (state) {
       is (s_header)   { state := s_address0 }
       is (s_address0) { state := s_address1 }
diff --git a/src/main/scala/devices/chiplink/SinkC.scala b/src/main/scala/devices/chiplink/SinkC.scala
index be7cbc2..47e4ba6 100644
--- a/src/main/scala/devices/chiplink/SinkC.scala
+++ b/src/main/scala/devices/chiplink/SinkC.scala
@@ -29,7 +29,7 @@ class SinkC(info: ChipLinkInfo) extends Module
   val s_address1 = UInt(2, width = 2)
   val s_data     = UInt(3, width = 2)
 
-  when (io.q.fire()) {
+  when (io.q.fire) {
     switch (state) {
       is (s_header)   { state := s_address0 }
       is (s_address0) { state := s_address1 }
diff --git a/src/main/scala/devices/chiplink/SinkD.scala b/src/main/scala/devices/chiplink/SinkD.scala
index 9bda0e8..8ab7e76 100644
--- a/src/main/scala/devices/chiplink/SinkD.scala
+++ b/src/main/scala/devices/chiplink/SinkD.scala
@@ -27,7 +27,7 @@ class SinkD(info: ChipLinkInfo) extends Module
   val d_hasData = info.edgeOut.hasData(d.bits)
   val d_grant = d.bits.opcode === TLMessages.Grant || d.bits.opcode === TLMessages.GrantData
 
-  when (io.q.fire()) {
+  when (io.q.fire) {
     switch (state) {
       is (s_header)   { state := Mux(d_grant, s_sink, Mux(d_hasData, s_data, s_header)) }
       is (s_sink)     { state := Mux(d_hasData, s_data, s_header) }
@@ -37,9 +37,9 @@ class SinkD(info: ChipLinkInfo) extends Module
 
   // Release the TL source
   val relack = d.bits.opcode === TLMessages.ReleaseAck
-  io.a_tlSource.valid := io.q.fire() && state === s_header && !relack
+  io.a_tlSource.valid := io.q.fire && state === s_header && !relack
   io.a_tlSource.bits := d.bits.source
-  io.c_tlSource.valid := io.q.fire() && state === s_header &&  relack
+  io.c_tlSource.valid := io.q.fire && state === s_header &&  relack
   io.c_tlSource.bits := d.bits.source
 
   // Construct the header beat
diff --git a/src/main/scala/devices/chiplink/SinkE.scala b/src/main/scala/devices/chiplink/SinkE.scala
index 3124aea..f02edb6 100644
--- a/src/main/scala/devices/chiplink/SinkE.scala
+++ b/src/main/scala/devices/chiplink/SinkE.scala
@@ -14,7 +14,7 @@ class SinkE(info: ChipLinkInfo) extends Module
     val d_clSink = UInt(INPUT, width = info.params.clSinkBits)
   }
 
-  io.d_tlSink.valid := io.e.fire()
+  io.d_tlSink.valid := io.e.fire
   io.d_tlSink.bits := io.e.bits.sink
 
   val header = info.encode(
diff --git a/src/main/scala/devices/chiplink/SourceA.scala b/src/main/scala/devices/chiplink/SourceA.scala
index 7fdcc35..83d4e0d 100644
--- a/src/main/scala/devices/chiplink/SourceA.scala
+++ b/src/main/scala/devices/chiplink/SourceA.scala
@@ -42,9 +42,9 @@ class SourceA(info: ChipLinkInfo) extends Module
 
   val (_, q_last) = info.firstlast(io.q, Some(UInt(0)))
   val q_hasData = !q_opcode(2)
-  val a_first = RegEnable(state =/= s_data, io.q.fire())
+  val a_first = RegEnable(state =/= s_data, io.q.fire)
 
-  when (io.q.fire()) {
+  when (io.q.fire) {
     switch (state) {
       is (s_header)   { state := s_address0 }
       is (s_address0) { state := s_address1 }
diff --git a/src/main/scala/devices/chiplink/SourceB.scala b/src/main/scala/devices/chiplink/SourceB.scala
index 248050c..be7b4b8 100644
--- a/src/main/scala/devices/chiplink/SourceB.scala
+++ b/src/main/scala/devices/chiplink/SourceB.scala
@@ -37,9 +37,9 @@ class SourceB(info: ChipLinkInfo) extends Module
 
   val (_, q_last) = info.firstlast(io.q, Some(UInt(1)))
   val q_hasData = !q_opcode(2)
-  val b_first = RegEnable(state =/= s_data, io.q.fire())
+  val b_first = RegEnable(state =/= s_data, io.q.fire)
 
-  when (io.q.fire()) {
+  when (io.q.fire) {
     switch (state) {
       is (s_header)   { state := s_address0 }
       is (s_address0) { state := s_address1 }
diff --git a/src/main/scala/devices/chiplink/SourceC.scala b/src/main/scala/devices/chiplink/SourceC.scala
index ee17685..20790d8 100644
--- a/src/main/scala/devices/chiplink/SourceC.scala
+++ b/src/main/scala/devices/chiplink/SourceC.scala
@@ -40,9 +40,9 @@ class SourceC(info: ChipLinkInfo) extends Module
 
   val (_, q_last) = info.firstlast(io.q, Some(UInt(2)))
   val q_hasData = q_opcode(0)
-  val c_first = RegEnable(state =/= s_data, io.q.fire())
+  val c_first = RegEnable(state =/= s_data, io.q.fire)
 
-  when (io.q.fire()) {
+  when (io.q.fire) {
     switch (state) {
       is (s_header)   { state := s_address0 }
       is (s_address0) { state := s_address1 }
diff --git a/src/main/scala/devices/chiplink/SourceD.scala b/src/main/scala/devices/chiplink/SourceD.scala
index 1634440..2c131c6 100644
--- a/src/main/scala/devices/chiplink/SourceD.scala
+++ b/src/main/scala/devices/chiplink/SourceD.scala
@@ -45,10 +45,10 @@ class SourceD(info: ChipLinkInfo) extends Module
 
   val q_grant = q_opcode === TLMessages.Grant || q_opcode === TLMessages.GrantData
   val (_, q_last) = info.firstlast(io.q, Some(UInt(3)))
-  val d_first = RegEnable(state =/= s_data, io.q.fire())
+  val d_first = RegEnable(state =/= s_data, io.q.fire)
   val s_maybe_data = Mux(q_last, s_header, s_data)
 
-  when (io.q.fire()) {
+  when (io.q.fire) {
     switch (state) {
       is (s_header)   { state := Mux(q_grant, s_sink, s_maybe_data) }
       is (s_sink)     { state := s_maybe_data }
diff --git a/src/main/scala/devices/chiplink/StuckSnooper.scala b/src/main/scala/devices/chiplink/StuckSnooper.scala
index 3f5960f..743fd1f 100644
--- a/src/main/scala/devices/chiplink/StuckSnooper.scala
+++ b/src/main/scala/devices/chiplink/StuckSnooper.scala
@@ -59,7 +59,7 @@ class StuckSnooper(uFn: Seq[TLClientPortParameters] => TLClientPortParameters)(i
 
     //Enable probes to in1 only after it issues an acquire
     val divertprobes = RegInit(true.B)
-    divertprobes := divertprobes && ~(in1.a.fire() && (in1.a.bits.opcode === TLMessages.AcquireBlock || in1.a.bits.opcode === TLMessages.AcquirePerm))
+    divertprobes := divertprobes && ~(in1.a.fire && (in1.a.bits.opcode === TLMessages.AcquireBlock || in1.a.bits.opcode === TLMessages.AcquirePerm))
     val bypass_c = Wire(Bool()) 
     bypass_c := bypass || divertprobes
 
diff --git a/src/main/scala/devices/chiplink/TX.scala b/src/main/scala/devices/chiplink/TX.scala
index 824d485..28ed811 100644
--- a/src/main/scala/devices/chiplink/TX.scala
+++ b/src/main/scala/devices/chiplink/TX.scala
@@ -47,10 +47,10 @@ class TX(info: ChipLinkInfo) extends Module
 
   // Consume TX credits and propagate pre-paid requests
   val ioX = (qX zip (tx.X zip txInc.bits.X)) map { case (q, (credit, gain)) =>
-    val first = RegEnable(q.bits.last, Bool(true), q.fire())
+    val first = RegEnable(q.bits.last, Bool(true), q.fire)
     val delta = credit -& q.bits.beats
     val allow = !first || (delta.asSInt >= SInt(0))
-    credit := Mux(q.fire() && first, delta, credit) + Mux(txInc.fire(), gain, UInt(0))
+    credit := Mux(q.fire && first, delta, credit) + Mux(txInc.fire, gain, UInt(0))
 
     val cq = Module(new ShiftQueue(q.bits.cloneType, 2)) // maybe flow?
     cq.io.enq.bits := q.bits
@@ -66,7 +66,7 @@ class TX(info: ChipLinkInfo) extends Module
   rxQ.io.enq.bits.data  := rxHeader
   rxQ.io.enq.bits.last  := Bool(true)
   rxQ.io.enq.bits.beats := UInt(1)
-  rx := Mux(rxQ.io.enq.fire(), rxLeft, rx) + Mux(rxInc.fire(), rxInc.bits, CreditBump(info.params, 0))
+  rx := Mux(rxQ.io.enq.fire, rxLeft, rx) + Mux(rxInc.fire, rxInc.bits, CreditBump(info.params, 0))
 
   // Include the F credit channel in arbitration
   val f = Wire(rxQ.io.deq)
@@ -79,7 +79,7 @@ class TX(info: ChipLinkInfo) extends Module
   val xmit = RegInit(UInt(0, width = xmitBits))
   val forceXmit = xmit === UInt(0)
   when (!forceXmit) { xmit := xmit - UInt(1) }
-  when (f.fire()) { xmit := ~UInt(0, width = xmitBits) }
+  when (f.fire) { xmit := ~UInt(0, width = xmitBits) }
 
   // Flow control for returned credits
   val allowReturn = !ioX.map(_.valid).reduce(_ || _) || forceXmit
diff --git a/src/main/scala/devices/msi/MSIMaster.scala b/src/main/scala/devices/msi/MSIMaster.scala
index 2ecc52c..af9d251 100644
--- a/src/main/scala/devices/msi/MSIMaster.scala
+++ b/src/main/scala/devices/msi/MSIMaster.scala
@@ -60,14 +60,14 @@ class MSIMaster(targets: Seq[MSITarget])(implicit p: Parameters) extends LazyMod
       data       = data << (shift << 3))._2
 
     // When A is sent, toggle our model of the remote state
-    when (io.a.fire()) {
+    when (io.a.fire) {
       remote := remote ^ select
       busy   := Bool(true)
     }
 
     // Sink D messages to clear busy
     io.d.ready := Bool(true)
-    when (io.d.fire()) {
+    when (io.d.fire) {
       busy := Bool(false)
     }
 
diff --git a/src/main/scala/devices/porgen/PorGen.scala b/src/main/scala/devices/porgen/PorGen.scala
index 25b6f60..a65fdf1 100644
--- a/src/main/scala/devices/porgen/PorGen.scala
+++ b/src/main/scala/devices/porgen/PorGen.scala
@@ -1,8 +1,7 @@
 package sifive.blocks.devices.porgen
 
 import Chisel._
-import chisel3.{Input,Output,dontTouch} //Parameterized black box
-import chisel3.experimental.IO
+import chisel3.{IO,Input,Output,dontTouch} //Parameterized black box
 import org.chipsalliance.cde.config.{Field, Parameters}
 import freechips.rocketchip.diplomacy._
 import freechips.rocketchip.interrupts._
diff --git a/src/main/scala/devices/spi/BlackBoxDelayBuffer.scala b/src/main/scala/devices/spi/BlackBoxDelayBuffer.scala
index b89e700..db11d15 100644
--- a/src/main/scala/devices/spi/BlackBoxDelayBuffer.scala
+++ b/src/main/scala/devices/spi/BlackBoxDelayBuffer.scala
@@ -1,6 +1,7 @@
 package sifive.blocks.devices.spi
 
 import Chisel._
+import chisel3.BlackBox
 import freechips.rocketchip.util.ShiftRegInit
 
 class BlackBoxDelayBuffer extends BlackBox {
diff --git a/src/main/scala/devices/spi/SPIFIFO.scala b/src/main/scala/devices/spi/SPIFIFO.scala
index 5741ca9..b81db82 100644
--- a/src/main/scala/devices/spi/SPIFIFO.scala
+++ b/src/main/scala/devices/spi/SPIFIFO.scala
@@ -24,8 +24,8 @@ class SPIFIFO(c: SPIParamsBase) extends Module {
   txq.io.enq <> io.tx
   io.link.tx <> txq.io.deq
 
-  val fire_tx = io.link.tx.fire()
-  val fire_rx = io.link.rx.fire()
+  val fire_tx = io.link.tx.fire
+  val fire_rx = io.link.rx.fire
   val rxen = Reg(init = Bool(false))
 
   rxq.io.enq.valid := io.link.rx.valid && rxen
diff --git a/src/main/scala/devices/spi/SPIFlash.scala b/src/main/scala/devices/spi/SPIFlash.scala
index e19e42b..cbf28e6 100644
--- a/src/main/scala/devices/spi/SPIFlash.scala
+++ b/src/main/scala/devices/spi/SPIFlash.scala
@@ -85,7 +85,7 @@ class SPIFlashMap(c: SPIFlashParamsBase) extends Module {
   val cnt_done = cnt_last || cnt_zero
   when (cnt_en) {
     io.link.tx.valid := !cnt_zero
-    when (io.link.tx.fire()) {
+    when (io.link.tx.fire) {
       cnt := cnt - UInt(1)
     }
   }
@@ -160,7 +160,7 @@ class SPIFlashMap(c: SPIFlashParamsBase) extends Module {
     is (s_data_post) {
       io.link.tx.valid := Bool(false)
       io.data.valid := io.link.rx.valid
-      when (io.data.fire()) {
+      when (io.data.fire) {
         state := s_idle
       }
     }
diff --git a/src/main/scala/devices/spi/SPIMedia.scala b/src/main/scala/devices/spi/SPIMedia.scala
index 30101f2..1ed1aa3 100644
--- a/src/main/scala/devices/spi/SPIMedia.scala
+++ b/src/main/scala/devices/spi/SPIMedia.scala
@@ -84,7 +84,7 @@ class SPIMedia(c: SPIParamsBase) extends Module {
 
           op.valid := io.link.tx.valid
           io.link.tx.ready := op.ready
-          when (op.fire()) {
+          when (op.fire) {
             state := s_interxfr
           }
         }
diff --git a/src/main/scala/devices/spi/TLSPIFlash.scala b/src/main/scala/devices/spi/TLSPIFlash.scala
index b7783da..780f085 100644
--- a/src/main/scala/devices/spi/TLSPIFlash.scala
+++ b/src/main/scala/devices/spi/TLSPIFlash.scala
@@ -65,7 +65,7 @@ class SPIFlashTopModule(c: SPIFlashParamsBase, outer: TLSPIFlashBase)
   val a = Reg(f.a.bits)
   val a_msb = log2Ceil(c.fSize) - 1
 
-  when (f.a.fire()) {
+  when (f.a.fire) {
     a := f.a.bits
   }
 
diff --git a/src/main/scala/devices/uart/UARTTx.scala b/src/main/scala/devices/uart/UARTTx.scala
index b327dd1..055179e 100755
--- a/src/main/scala/devices/uart/UARTTx.scala
+++ b/src/main/scala/devices/uart/UARTTx.scala
@@ -65,10 +65,10 @@ class UARTTx(c: UARTParams) extends Module {
   val busy = (counter =/= 0.U)
   io.in.ready := io.en && !busy
   io.tx_busy := busy
-  when (io.in.fire()) {
+  when (io.in.fire) {
     printf("UART TX (%x): %c\n", io.in.bits, io.in.bits)
   }
-  when (io.in.fire() && plusarg_tx) {
+  when (io.in.fire && plusarg_tx) {
     if (c.includeParity) {
       val includebit9 = if (c.dataBits == 9) Mux(io.data8or9.get, false.B, io.in.bits(8)) else false.B
       val parity = Mux(io.enparity.get, includebit9 ^ io.in.bits(7,0).asBools.reduce(_ ^ _) ^ io.parity.get, true.B)
diff --git a/src/main/scala/ip/xilinx/ibufds_gte2/ibufds_gte2.scala b/src/main/scala/ip/xilinx/ibufds_gte2/ibufds_gte2.scala
index 8c77e63..5de1e8f 100644
--- a/src/main/scala/ip/xilinx/ibufds_gte2/ibufds_gte2.scala
+++ b/src/main/scala/ip/xilinx/ibufds_gte2/ibufds_gte2.scala
@@ -1,6 +1,7 @@
 package sifive.blocks.ip.xilinx.ibufds_gte2
 
 import Chisel._
+import chisel3.BlackBox
 
 //IP : xilinx unisim IBUFDS_GTE2
 //Differential Signaling Input Buffer
diff --git a/src/main/scala/util/SRLatch.scala b/src/main/scala/util/SRLatch.scala
index e3b4e13..e84ff26 100644
--- a/src/main/scala/util/SRLatch.scala
+++ b/src/main/scala/util/SRLatch.scala
@@ -1,6 +1,7 @@
 package sifive.blocks.util
 
 import Chisel._
+import chisel3.BlackBox
 
 class SRLatch extends BlackBox {
   val io = new Bundle {
